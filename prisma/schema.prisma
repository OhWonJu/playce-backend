// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  name              String?
  nickName          String?
  email             String?  @unique
  hashedPassword    String?
  phoneNumber       String?  @unique
  image             String?
  bio               String?
  currentTrackId    String?
  currentPlayTime   Float    @default(0)
  currentPlayListId String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  accounts  Account[] // Social Accounts
  albums    Album[]
  playLists PlayList[]
  Queue     Queue?
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model PlayList {
  id           String   @id @default(uuid())
  isPublic     Boolean  @default(false)
  playListName String
  thumbNail    String[]
  thumbNailMap Json?
  count        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
  tracks Json[]
}

model Queue {
  id             String @id @default(uuid())
  queueThumbNail Json?
  songCount      Int    @default(0)
  totalPlayTime  Int    @default(0)
  tracks         Json[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Artist {
  id         String   @id @default(uuid())
  artistName String   @unique
  artistInfo String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // groupId      String?
  // group        Artist?  @relation("groupMember", fields: [groupId], references: [id])
  // groupMembers Artist[] @relation("groupMember")
  Album Album[]
}

model Album {
  id          String    @id @default(uuid())
  albumCode   String    @unique
  albumName   String
  albumArtURL String
  albumType   String
  albumInfo   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  releasedAt  DateTime?

  artist   Artist  @relation(fields: [artistId], references: [id])
  artistId String
  tracks   Track[]
  genres   Genre[]
  users    User[]
}

model Track {
  id          String  @id @default(uuid())
  artistName  String
  albumName   String
  albumArtURL String
  trackTitle  String
  trackNumber Int
  trackURL    String
  trackTime   Int
  peaks       Float[]

  // relation
  Album   Album  @relation(fields: [albumId], references: [id])
  albumId String
}

model Genre {
  id    String @id @default(cuid())
  genre String @unique

  Albums Album[]
}
